simpson <- function(ftn, a, b, tol = 1e-8, verbose = FALSE) {
# numerical integral of ftn from a to b
# using Simpson's rule with tolerance tol
#
# ftn is a function of a single variable and a < b
# if verbose is TRUE then n is printed to the screen
# initialise
n <- 4
h <- (b - a)/4
fx <- sapply(seq(a, b, by = h), ftn)
S <- sum(fx*c(1, 4, 2, 4, 1))*h/3
S.diff <- tol + 1  # ensures we loop at least once
# increase n until S changes by less than tol
while (S.diff > tol) {
# cat('n =', n, 'S =', S, '\n')  # diagnostic
S.old <- S
n <- 2*n
h <- h/2
fx[seq(1, n+1, by = 2)] <- fx  # reuse old ftn values
fx[seq(2, n, by = 2)] <- sapply(seq(a+h, b-h, by = 2*h), ftn)
S <- h/3*(fx[1] + fx[n+1] + 4*sum(fx[seq(2, n, by = 2)]) +
2*sum(fx[seq(3, n-1, by = 2)]))
S.diff <- abs(S - S.old)
}
if (verbose) cat('partition size', n, '\n')
return(S)
}
newtonraphson <- function(ftn, x0, tol = 1e-9, max.iter = 100) {
# Newton_Raphson algorithm for solving ftn(x)[1] == 0
# we assume that ftn is a function of a single variable that returns
# the function value and the first derivative as a vector of length 2
#
# x0 is the initial guess at the root
# the algorithm terminates when the function value is within distance
# tol of 0, or the number of iterations exceeds max.iter
# initialise
x <- x0
fx <- ftn(x)
iter <-  0
# continue iterating until stopping conditions are met
while ((abs(fx[1]) > tol) && (iter < max.iter)) {
x <- x - fx[1]/fx[2]
fx <- ftn(x)
iter <- iter + 1
cat("At iteration", iter, "value of x is:", x, "\n")
}
# output depends on success of algorithm
if (abs(fx[1]) > tol) {
cat("Algorithm failed to converge\n")
return(NULL)
} else {
cat("Algorithm converged\n")
return(x)
}
}
volume = function(h,hmax,ftn) {
if (h < 0) {
return(NA)
} else if (h > hmax) {
return(NA)
} else {
V = simpson(ftn,0,hmax)
return(V)
}
}
height = function(h,hmax,v,ftn) {
if (h < 0) {
return(NA)
} else if (h > hmax) {
return(NA)
} else {
new_volume = as.numeric(volume(h, hmax, ftn) + v)
max_volume = volume(h = hmax,hmax,ftn)
if (new_volume > max_volume) {
dam_level = hmax
} else if (new_volume < 0) {
dam_level = 0
}
newt_input = function(x) {
make_new_volume_zero = volume(x,hmax,ftn) - new_volume
return(c(make_new_volume_zero,ftn(x)))
}
u = newtonraphson(newt_input,hmax, tol = 1e-9, max.iter = 100)
return(u)
}
}
A = function(h) {
return(h)
}
heights = c(-1,0.5,0.5,3.5,3.5,3.5,5)
volumes = c(1,1,-1,1,2,-1,1)
for (i in seq(1,7)){
print(height(heights[i], hmax = 4, volumes[i], ftn = A))
}
height = function(h,hmax,v,ftn) {
if (h < 0) {
return(NA)
} else if (h > hmax) {
return(NA)
} else {
new_volume = as.numeric(volume(h, hmax, ftn) + v)
max_volume = volume(h = hmax,hmax,ftn)
if (new_volume > max_volume) {
dam_level = hmax
} else if (new_volume < 0) {
dam_level = 0
}
newt_input = function(x) {
N = volume(x,hmax,ftn) - new_volume
return(c(N,ftn(x)))
}
u = newtonraphson(newt_input,hmax, tol = 1e-9, max.iter = 100)
return(u)
}
}
ftn1 = function(x) return(x + (x*(1+x)^10)/((1+x)^10 - 1) - 1000/10000)
newtonraphson(ftn1,10)
ftn1(10)
gen = function(x) return(x^2)
gen(2)
heights <- function(h, hmax, v, ftn) {
# defining vmax and w in terms of our inputs: h, hmax, and v
vmax <- volume(hmax, hmax, ftn)
if (h > hmax) {
h <- hmax
} else if (h < 0) {
h <- 0
}
w <- as.numeric(volume(h, hmax, ftn) + v)
if (w > vmax){
u <- hmax
} else if (w < 0){
u <- 0
} else {
# defining a single-variate function for Newton-Raphson, that returns the vector (f(u), f'(u))
# note that this function calls on the volume function,
# and depends on the 'hmax' and 'ftn' arguments of height(...)
eta <- function(x){
m <- hmax
y <- ftn
f <- volume(x, m, y) - w
d <- ftn(x)
return(c(f,d))
}
u <- newtonraphson(eta, hmax, tol = 1e-9, max.iter = 100)
}
return(u)
}
heights(0.5,4,1,A)
volume(4,4,1,A)
volume(4,4,1,A)
volume(4,4,A)
